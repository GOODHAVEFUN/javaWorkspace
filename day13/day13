day13
복습 -> 예외처리 -> API -> Object 클래스 -> Wrapper 클래스

0. 복습
내부클래스(Inner Class)
   클래스 안에서 선언된 클래스
   내부클래스 객체화는 외부클래스가 메모리에 할당되어야만 가능하다
   내부클래스로 선언된 클래스는 외부 클래스를 상속받지 않아도 외부클래스의 멤버를 사용 가능

익명클래스(Anonymous Class)
   이름이 없는 클래스
   미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다

람다식(Lambda Expression)   : 익명메소드
   함수형 인터페이스로 추상메소드가 한개만 선언되어있을 때 람다식으로 재정의 가능
   메소드를 하나의 식으로 표현한다

1. 예외처리
   
오류의 종류
   에러(Error)   : 개발자가 해결할 수 없는 문제(코드로 수습 불가능)
   예외(Exception)   : 개발자가 해결 가능한 문제(코드로 수습 가능)

예외의 발생시점
   확인된 예외(Checked Exception)   : 컴파일 단계에서 발생하는 예외(이클립스 빨간줄)
   미확인 예외(Unchecked Exception)   : 프로그램 실행중(런타임) 발생하는 예외

예외처리
   예상되는 예외를 적절한 처리를 하여 비정상적인 종료를 막는다

예외처리 문법
   try {
      실행할 명령문;
      (예외가 예상되는 코드)
   }catch(예외이름 객체명){
      예외를 처리하는 명령문
      (예외 발생 시 실행할 코드)
   }catch(예외이름 객체명){
      예외를 처리하는 명령문
      (예외 발생 시 실행할 코드)
   }
   ...
   }finally{
      오류 발생여부에 상관없이 무조건 실행할 코드;
   }
   
자바의 오류
   자바에서는 발생할 수 있는 오류를 클래스로 정의해 두었다
   만약 실행중 오류가 발생하면 해당 오류클래스의 객체가 생성된다(메모리에 할당된다)
   예외처리를 해두었다면 그 객체의 주소를 catch(예외클래스 참조변수)의 참조변수가 받게된다
   예외 클래스에는 다양한 기능을 제공한다

예외클래스에서 제공하는 메소드
   getMessage()   : 예외 메세지를 문자열로 반환함
   printStackTrace()   : 예외가 발생지점을 추적하여 단계별로 전부 출력함
   toString()   : 발생한 예외 객체를 문자열로 반환함
      toString() 생략 가능함 -> 참조 변수를 출력하면 toString()이 자동으로 사용됨


// Exception in thread "main" java.lang.NullPointerException: 
//   Cannot invoke "java.util.Scanner.next()" because "sc" is null
   오류 클래스를 알려준다. : 오류 메시지(next()를 호출할 수 없다)
// at exceptionTest.ExcetpionTest01.main(ExcetpionTest01.java:9)
   어디에서 발생했는지 알려준다

  예외처리를 적절하게 수행하면 프로그램의 안정성을 높이고, 신뢰성 있는 프로그램을 만들 수 있다
  
throw와 throws
   throws : 예외 던지기, 메소드의 선언부에 사용한다
      메소드에서 발생할 수 있는 오류를 메소드를 정의할 때 처리하지 않고
      해당 메소드를 사용하는 쪽으로 던져서 메소드를 사용하는 개발자가 처리하도록 한다
      (상황에 맞게 처리하기 위함)
      
      ex) void method() throws Exception {}

   throw    : 예외를 발생시킨다
      ex) throw new 예외명();
 
 numberFormatException	: 문자열을 숫자로 변환하나는 과정에서 발생하는 예외
 						  유효하지않은
 	Integer.Parse("문자");
  
  
사용자 정의 예외
	public class 예외명 exteds Exception{
		//생성자
		생성자(){
			super("사용자 정의 예외 메세지")

2. API
   내부 API   -> JDK 설치시 제공해주는 기본 API
   외부 API -> 다른 개발자들이 개발한 패키지 및 클래스들을 의미한다
         JAR파일로 배포하며 자바 프로젝트에 bulid path에 추가하여 사용할 수 있다

JAR 파일 배포
   배포할 클래스 또는 패키지 우클릭
   -> Export -> java/jar file 선택
   -> Next -> dextination 을 원하는 경로로 선택
   -> Export Java source files.. 체크(API 주석 포함)
   -> Finish 클릭

외부 API(JAR) 파일 추가
   배포된 JAR파일 다운
   -> 프로젝트 우클릭 -> Bulid Path
   -> Cofigure Build Path 클릭
   -> Libraries 탭 클릭 -> Add External JARs 클릭
   -> 저장된 경로 .jar파일 더블클릭으로 추가
   -> Apply 클릭 -> Orders and Exports 탭 클릭
   -> Select All 클릭 -> Apply and Close 클릭
   
API 주석
//
/* */
javalang
java.net 통신을 위한	
  
  
  
  
  
  
  
  
  