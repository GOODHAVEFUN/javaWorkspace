day10
추상클래스 문제 -> 복습 -> 인터페이스 -> 내부클래스

Food 추상 클래스

필드	name
추상 메소드
	calculatePrice()  음식의 가격을 계산하여 반환
일반 메서드
	display() 	
	"주문한 음식: [음식 이름], 가격: [음식 가격]" 음식정보 출력

Burger, Pizza, Salad 클래스
	Food 추상 클래스를 상속하는 서브클래스
	각 클래스는 추상 메서드를 오버라이딩하여 음식의 가격 반환

Main 클래스
	Burger, Pizza, Salad 클래스의 인스턴스 생성
	각 음식의 속성을 설정
	display() 메서드를 호출하여 각 음식의 정보를 출력
	calculatePrice() 메서드를 호출하여 각 음식의 가격 출력

0. 복습
1) 변수 유형
				
	static 변수	클래스변수, 정적변수		메소드영역=스태틱영역
	인스턴스 변수	객체 변수			힙영역
	local 변수	지역 변수			스택영역(스택프레임 내부)

2. 상속
		동물			추상화, 일반화
	포유류		조류
고래	     박쥐    참새		펭귄	구체적, 특수화
	
	객체지향에서 상속은 상위 클래스의 특성을 하위 클래스에서 상속하고
	추가적으로 필요한 특성을 추가해서 사용할 수 있다는 의미이다
	inheriance -> extends
	
3. 참조변수의 복사
	Call By Value		값에 의한 호출
	Call By Reference	참조에 의한 호출

	기본 자료형 변수는 저장하고 있는 값을 그 값 자체로 판단한다
	참조 자료형 변수는 저장하고 있는 값을 주소로 판단한다(참조값)
	기본 자료형 변수를 복사할 때나 참조 자료형 변수를 복사할 때 일어나는 일은 같다
	즉, 가지고 있는 값을 그대로 복사해서 넘겨준다

4. 접근 제어자
	public : 모두 접근 가능
	protected : 상속 / 같은 패키지내의 클래스에서 접근 가능
	default : 같은 패키지 내의 클래스에서 접근 가능
	private : 본인만 접근 가능 / getter, setter

5. OOP 4대 특성
	캡슐화(Encapsulation)	데이터와 메소드를 하나의 단위로 묶어 외부에 노출되지 않도록 하는것
				데이터의 보안성과 코드의 재사용성을 높일 수 있다
	상속(Inheritance)	클래스 간에 부모-자식관계를 형성하여 특성을 상속 받을 수 있는 것(확장)
				코드의 재사용성을 높일 수 있다
	다형성(Polymorphism)	하나의 것으로 여러가지 동작할 수 있도록 하는 것
				코드의 유연성을 높일 수 있다
	추상화(Abstraction)	모델링하기 위해 필요한 개념을 간추려서 표현하는 과정
				클래스, 인터페이스를 활용하여 추상화를 구현할 수 있다

	=> 코드의 가독성, 재사용성, 확장성, 유지보수 등

	new
	private, protected, public, default
	static
	extends
	class

	객체지향언어의 구성요소
	클래스, 변수, 메소드

6. 추상 클래스
	추상클래스는 객체를 만들 수 없다, new 사용할 수 없다
	추상메소드는 상속받은 클래스에서 메소드의 구현을 강제한다(오버라이딩)
	추상메소드를 포함하는 클래스는 반드시 추상클래스여야만한다
-------------------------------------------------------------------
1. 인터페이스
클래스 상속과 인터페이스의 구현
	1. 클래스는 단일상속만 가능하며 인터페이스는 다중 구현이 가능하다
	2. 인터페이스는 인터페이스를 상속할 수 있다
	3. 상속과 구현은 별개이다
		하나의 클래스에 상속과 구현을 할 수 있다


인터페이스를 사용하는 이유
	1. 여러 클래스에서 선언할 멤버들을 일관되게 하기 위해 사용한다(표준화)
	2. 관계없는 클래스들을 그룹화 시킬 수 있다(마커 인터페이스)

인터페이스의 불편함
	인터페이스는 강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하여 사용하는게 불가능하다
	이를 해결하기 위해 Adapter 라는 추상클래스를 활용한다

어댑터 클래스(추상클래스)와 인터페이스
	인터페이스 멤버 : 상수, 추상메소드
	추상클래스 멤버 : 필드, 생성자, 일반메소드, 추상메소드

	인터페이스의 강제성을 완화시키기 위해 Adapter클래스를 사용한다
	어댑터 클래스는 추상클래스로 만들기 때문에 미구현된 메소드와 구현된 메소드가 동시에 존재할 수 있다
	그러므로 어댑터 클래스에서 인터페이스를 상속받아 강제성을 없애고 싶은 메소드만 재정의 해준다
	이후 어댑터 클래스를 상속받는 자식클래스는 내가 원하는 메소드만 재정의 할 수 있게 된다
	이 때 어댑터 클래스의 이름은 이름 뒤에 Adapter를 붙여주어 목적을 알려주는 것이 좋다

	인터페이스(모든 강제성) --(일부구현)--> 추상클래스(일부 강제성)--(상속)--> 클래스

다중상속
	여러 부모 클래스를 상속하는 것을 다중상속이라고 한다(c++ 됨)
	JAVA 모호성때문에 다중상속을 지원하지 않는다

	JDK8버전부터 인터페이스에 default 메소드 등을 만드는 것을 허용한다(특정 메소드의 구현을 허용한다)
	여러개를 구현(상속)할 수 있는 인터페이스의 특징 때문에 다중상속을 지원하는 것과 다름없다

인터페이스의 추가된 기능
	1. default 메소드를 선언할 수 있다
		public/default 리턴타입 메소드명(매개변수){
			실행할 코드;
		}

	2. static 메소드를 선언할 수 있다
		public static 리턴타입 메소드명(매개변수){
			실행할 코드;
		}

	3. private 메소드를 선언할 수 있다(JDK 9부터 사용가능하다)
			

모호성(Ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 서로 다른 부모 클래스에 동일한 이름의 멤버가 있다면
	어떤 부모의 멤버인지 알 수 없다

모호성 해결방법
	1. 두 개의 인터페이스에 같은 메소드가(이름, 매개변수, 리턴타입이 같음) 선언되어 있는 경우
		-> 자식 클래스에서 재정의하여 사용한다
	2. 부모 클래스의 메소드와 인터페이스의 디폴트 메소드의 이름과 매개변수가 같다
		-> 부모 클래스의 메소드가 사용된다

=> 인터페이스도 타입이다
   인터페이스는 부모이고 구현한 클래스가 자식이다

마커인터페이스(Marker Interface)
	클래스들을 그룹화하기 위한 목적으로 사용한다
	서로 다른 클래스들을 공통되는 타입을 갖도록 하는것이 유일한 목적이기 때문에
	마커 인터페이스는 어떠한 멤버도 선언하지 않는다


	초식동물		육식동물		잡식동물
	얼룩말		상어		쥐
	사슴		늑대		비둘기
	고라니		독수리		참새
	말				원숭이
	
	








2. 내부클래스(Inner Class)
	클래스 멤버 : 필드, 생성자, 메소드 + 클래스

	클래스 내부에 선언된 클래스를 내부 클래스라고 한다
	내부 클래스를 가진 클래스를 외부 클래스라고 한다
	클래스를 구성하는 멤버로는 변수, 메소드, 생성자, 클래스가 있다
	만약 B클래스를 A클래스에서만 사용한다면 B클래스를 내부클래스로 만들어 사용한다
	외부 클래스가 메모리에 할당되야 내부클래스의 객체화가 가능하기 때문에 B클래스를 별도로 사용하지 못한다
	내부클래스는 외부클래스의 멤버이기 때문에 외부 클래스의 멤버를 상속없이 사용가능하다
	메소드 안에서도 클래스를 선언할 수 있다

내부클래스의 종류
	1. 인스턴스 내부 클래스 : 다른 클래스 내부에서 선언되는 클래스
		외부 클래스의 인스턴스와 연관되어 있음
		인스턴스 내부 클래스의 필드, 메소드에도 외부클래스의 인스턴스 변수에 접근 가능

	2. 스태틱 내부 클래스 : 다른 클래스 내부에서 선언되는 클래스
		외부 클래스의 인스턴스와 상관없이 독립적으로 사용될 수 있음
		외부 클래스의 필드, 메소드에 접근 가능

	3. 로컬 내부 클래스 : 메소드나 초기화 블록 내부에서 선언되는 클래스
		선언된 블록에서만 사용될 수 있음


	인스턴스 내부 클래스는 외부 클래스의 인스턴스가 있어야 생성가능함
	(내부 클래스의 인스턴스를 생성할 때는 외부 클래스의 인스턴스를 먼저 생성한 후 그 인스턴스를 이용해
	내부 클래스의 인스턴스를 생성해야함)
	스태틱 내부 클래스는 외부 클래스의 인스턴스가 없어도 생성가능함
	(외부 클래스의 인스턴스를 먼저 생성하지 않아도 됨)





















