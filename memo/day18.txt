day18
쓰레드 -> 파일입출력

1. 쓰레드
쓰레드의 최대 단점
	교착상태(DeadLock)
	쓰레드간의 대기 상태가 종료되지 않아서 무한정 대기만 하는 비정상적인 상태
	-> 전체 쓰레드를 깨워주거나 하나의 쓰레드를 종료시키면 됨
	
	동기화(Synchronization)
	A쓰레드와 B쓰레드가 작업 진행 시 A쓰레드가 사용중인 자원을 B가 사용하여 변경한다면
	A의 작업의도와 다르게 결과가 나타날 수 있다
	이것을 방지하기 위해 동기화를 사용한다

동기화 영역 만들기
	동기화 블록	synchronized(객체명){...}
			일부 소스코드만 동기화를 걸어준다
			쓰레드는 지정된 객체의 lock을 얻어내며 해당 객체의 lock을 가진 쓰레드만
			동기화 블록에 접근이 가능하다

	동기화 메소드
			synchronized 메소드명(){...}
			해당 메소드 전체에 동기화를 걸어준다

lock
	쓰레드가 공유되는 자원을 사용할 때 생기는 동기화로 해결한다
	이 때 하나의 자원에 하나의 쓰레드 접근하기 위해 사용하는 개념이 lock이다
	자바의 모든 객체는 하나의 lock을 가지고 있다
	동기화 된 영역을 쓰레드가 사용하기 위해서는 lock을 획득해야만하며
	동기화 영역을 벗어나면 lock을 반납하고 다른 쓰레드가 lock 가져와서 자원을 사용한다

쓰레드 제어 메소드
	join(), join(long millis)
		현재 쓰레드 작업을 멈추고, join을 사용한 쓰레드를 기다린다
	sleep(long millis)
		매개변수로 전달한 시간동안 쓰레드를 멈춘다
	wait()
		동기화된 영역에서만 사용가능
		쓰레드의 lock을 회수하여 다른 쓰레드에게 제어권을 넘겨주고 대기한다
		(대기중에는 lock을 얻을 수 없다)
	notify()
		동기화된 영역에서만 사용가능
		대기중인 쓰레드 중 하나를 깨운다
		(실행 가능한 상태로 바뀌는 것이지 lock을 바로 넘겨주는게 아니다)

	interrupt()
		sleep(), wait(), join()를 사용하여 쓰레드가 멈췄을때 예외를 발생시킬 수 있다
		InterruptedException은 쓰레드를 멈출 때 사용하는 일종의 신호
		쓰레드 종료에 사용된다

Thread 종료 방법
	1. 쓰레드 객체의 interrup()를 사용하여 InterruptedException을 발생시켜 try~catch문으로 이동시킨다
	여기에서 InterruptedException은 쓰레드를 대기상태로 만드는 sleep(), wait(), join() 등의 메소드를
	사용한 곳에서 발생된다
	위의 메소드들에 예외처리하고 interrpt()를 통해 예외를 발생시키면 쓰레드의 흐름이 해당 메소드의 catch문으로
	이동된다
	예외처리를 했다고 해서 강제 종료되는 것이 아니라 catch문에서 쓰레드가 종료될 수 있는 코드를 작성하여 처리해야한다

	2. System.exit(0) 을 사용하면 전체 쓰레드가 종료된다(프로그램 종료)

	3. 쓰레드 객체를 대기상태로 만드는 메소드를 사용하지 않았을경우 Thread.interrupted()를 사용하면
	interrupt()의 사용 여부를 boolean 타입으로 반환한다
	이 점을 이용하면 쓰레드의 흐름을 제어할 수 있다
	단, interrupted()를 한번 사용하거나 예외처리로 catch문으로 이동하면 interrupted()는 다시 false를 반환한다

2. 파일 입출력
	입출력 : 키보드로 입력, 모니터 출력 -> 콘솔 창에 입력 메소드, println() 출력 메소드 콘솔 창에 출력
	입출력 : 프로그램 내부의 데이터 또는 프로그램 외부의 데이터를 주고받는 것
		내부 데이터 : 변수에 저장된 값 등
		외부 데이터 : 내부 데이터를 제외한 모든 것, 보조기억장치에 저장된 데이터나 네트워크상에 있는 데이트 등

	test1.txt, test2.txt 자바 프로그램 기준으로 외부 데이터(자바 프로그램 기준으로 생각)
	데이터를 사용하려면 자바 프로그램 기준으로 데이터를 가져온다(읽기 read)
	자바 프로그램이 test2.txt에게 데이터를 보낸다(쓰기 write)

스트림(stream)
	데이터를 주고받는 통로
	데이터는 byte 형태로 전송된다

버퍼(buffer)
	데이터를 전송할 때 데이터를 임시로 저장하는 공간(임시 저장공간)

스트림과 버퍼
	데이터를 바이트 단위로 전송하지 않고 버퍼라는 임시 저장공간에 저장을 하여 일정 데이터가 쌓였을때
	한 번에 전송하면 전송속도가 빠르다

File 클래스
	파일을 자바의 객체로 다룰 수 있게 해주는 클래스
	외부에 파일을 만들거나 외부 파일을 가져올 때 그 파일을 File 타입 객체로 만들어서 사용한다

스트림의 종류
	기본 스트림 : 실제 데이터를 주고받는 스트림
	보조(필터) 스트림 : 기본 스트림 보조하여 기능을 향상시킨다

	기본 스트림
		OutputStream / InputStream : 데이터를 byte 단위로 전송한다
		Writer / Reader  : 데이터를 2byte(문자 단위) 단위로 전송한다

	보조 스트림
		Buffered
		BufferedOutputStream / BufferedWriter 등, ...
		데이터를 버퍼로 처리한다

표준입출력
	InputStream /  PrintStream
		키보드, 콘솔과 연결된 스트림
운영체제
	System(in, Out)

















