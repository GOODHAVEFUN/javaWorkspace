day16
과제풀이 -> Map -> Thread

0. 복습
1) List 인터페이스

	구현클래스
	Vector
	LinkedList
	ArrayList
		순서를 보장한다
		중복을 허용한다

2) Set 인터페이스
	구현클래스
	HashSet
		순서를 보장하지 않는다
		중복을 허용하지 않는다

	=> 값의 존재여부를 파악할 때 사용하기 좋다

1. Map
	데이터의 순서를 보장하지 않는다
	데이터를 Key와 Value 한쌍으로 저장하며 Key로 데이터에 접근할 수 있다
	Key는 ArrayList의 index와 비슷한 역할을 하며 중복을 허용하지 않는다(index에 중복이 없는것과 동일)

	구현클래스
	HashMap
		hashCode()가 반환하는 해시코드를 이용하며 검색속도가 상대적으로 빠르다
		이미 저장된 Key를 가진 한쌍의 데이터를 넣으면 가장 마지막에 넣은 Value로 수정된다(Value는 수정가능)
		저장되지 않은 Key를 가진 한쌍의 데이터를 넣으면 새롭게 추가된다

	
Hash
	데이터를 다루는 기법
	Map처럼 Key와 Value로 이루어져있다
	Key를 Hash 함수에 넣어 특정 정수값을 산출한다(이 과정을 해싱(Hasing))
	얻어낸 정수값을 bucket이라고 부르는 배열의 인덱스 번호로 사용하여 value를 저장한다
	value를 검색할 때도 key를 넘겨주면 해싱을 통해서 해당 인덱스를 즉시 찾아간다

	배열구조의 가지는 일반배열, ArrayList와 비교했을 때
	양쪽 다 index번호를 사용한다는 점에서 빠른 속도를 갖는다
	단, 배열의 구조는 내가 저장하는 값이 어느 index에 존재하는지 별도로 관리해줘야하지만
	Hash를 사용하면 Key라는 것을 사용하면 자동으로 올바른 index를 찾아간다는 장점이 있다

2. Thread
	프로그램(소프트웨어)	
		자바프로그램	: 특정 작업을 수행하는 명령어(소스코드)들의 모임
		
	프로세스
		프로그램은 하나 이상의 프로세스(Process)로 실행됨
		실행중인 프로그램의 인스턴스
		운영체제(OS)로부터 자원(CPU, 메모리, 파일 등)을 할당 받아서 실행됨

	java 프로그램 -> 하나의 java 프로그램이 실행되면 -> 하나의 java 프로세스가 생성됨
	이 프로세스 안에서 여러개의 쓰레드가 생성될 수 있다

	-----------------------------------------------------------------------
프로그램	: 특정 작업을 수행하는 명령어(소스코드)들의 모음
		메모리를 할당받지 않은 상태 -> 꺼져있다

프로세스 : 실행중인 프로그램(ctrl + shift + esc)
	프로세스는 프로그램을 실행시키기 위한 메모리 등의 자원과 쓰레드로 구성된다
	즉, 프로세스는 하나 이상의 쓰레드를 가지고 있다

		APP
	S/W		JVM
		OS
	
	H/W


	H/W 자원	: CPU 등
	S/W 자원 : 파일, 기타 소프트웨어 등
자원
	시스템 자원	프로그램을 실행시키기 위해 필요한 것을 운영체제를 제공받아야한다		
	하드웨어 자원	주기억장치, 보조기억장치, 입출력장치 등
	소프트웨어 자원	파일, signal, 기타 소프트웨어 등

	프로세스는 자원과 쓰레드를 가지고 있다
	프로세스를 확인했을때 프로세스가 여러개 있다(멀티 쓰레드)
	멀티프로세스를 지원하는 운영체제 WINDOWS 운영체제가 지원하는 것

	쓰레드는 하나의 프로세스 안에서 작업이 이루어진다
	작업은 한줄한줄 쓴 코드라고 생각하면 됨(명령어 단위로 실행되는 것)
	흐름을 생각하면 됨

	프로세스를 동시에 실행 시키는 것을 멀티 프로세스
	java는 운영체제가 바로 실행시켜주지 않고 JVM에 의해서 실행되기 때문에 JVM으로부터 시스템 자원을 할당받으며
	쓰레드도 JVM이 관리한다
	
쓰레드
	하나의 프로세스 내에서 작업을 처리하는 흐름의 단위
	(쉽게 말하면) 작업을 처리하는 것

	main메소드 -> 쓰레드
	main 메소드의 명령어들을 실행시키는 main 쓰레드
	작성한 코드는 위에서 아래로 순서대로 실행되었다 => main쓰레드 1개를 사용한 것, 싱글 쓰레드를 사용한 것

싱글 쓰레드
	하나의 쓰레드가 작업을 마치면 프로그램이 종료된다
	쓰레드를 하나만 가지고 있기 때문에 작업을 순차적으로 처리하므로 상대적으로 비효율적이다
	쓰레드는 자원을 사용하는데 싱글쓰레드는 혼자서 자원을 사용하므로 동기화를 걱정할 필요가 없다
	따라서 안정성이 높고 설계가 쉽다

	(ex)
	a(30분), b(1시간), c(30초) -> 작업시간과 상관없이 순차적으로 작업 함(비효율적)
	작업이 하나씩 처리되기 때문에 안정성은 상대적으로 높고 설계가 쉽다



























