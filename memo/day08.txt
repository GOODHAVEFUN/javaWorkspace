day08
복습 -> 상속 -> 접근제한자 -> Casting

0. 복습
클래스
	1. 사용자 정의 타입
	2. 연관성 있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있는 것
	3. 객체를 생성하기 위한 틀

객체, 인스턴스화
	클래스명 객체명 = new 생성자();

클래스 구성요소
	필드(변수), 메소드, 생성자
	
객체 사용방법
	객체명.필드명;
	객체명.메소드명();
	
	클래스명 객체명 = new 생성자("짱구", 50);
	syso(객체명.name);   //짱구
	
생성자
	1. 필드 초기화
	2. 객체 생성시 실행되는 코드가 작성되어있다
	
this, this()
	this 객체 자기 자신, 객체 자신의 주소값
		자동 생성되는 변수
		
	this()   자기자신의 생성자
		생성자 내부에서만, 최상단에 작성한다
	
static
	method영역에 할당
	
	static 변수, static 메소드는 객체를 생성하지 않아도 사용가능
	static 변수, 공통으로 사용되는 변수에 사용하는 것을 고려한다(객체 상관없이 하나의 저장공간이므로 모든 객체가 공유해서 사용한다)
	static 메소드, 인스턴스 멤버를 사용할 수 없다
	클래스명.변수명으로 사용한다
	
변수의 종류
	1. 지역변수
		메소드 또는 그안의 중괄호에서 선언된 변수   

	2. 매개변수
		메소드의 소괄호 안에서 선언된 변수
		
	void add(int num1, int num2){
		int result = num1 + num2;
	
	}
	
	3. 인스턴스 변수
		클래스 중괄호 영역에서 선언된 변수
			
	4. 정적변수, 클래스변수, 스태틱 변수 : static 키워드가 붙은 변수
				객체 간 공유, 편의성
				
1. 상속(inheritance)
   1. 기존에 선언된 클래스의 멤버를 새롭게 만들 클래스에서 사용하고 싶을 때 상속을 받고 새로운 기능만 추가한다
   2. 여러 클래스 선언 시 멤버가 겹치는 경우 부모 클래스를 먼저 선언하고 공통멤버를 자식 클래스에게 상속해준다

상속 문법
   class Parents{
      Parents 멤버
   }

   class Child extends Parents{
      Parents 멤버
      Child 멤버
   }   

   Parents클래스 : 부모클래스, 슈퍼클래스, 기반클래스, 상위클래스
   Child 클래스 : 자식클래스, 서브클래스, 파생클래스, 하위클래스

   * 주의사항
      자바에서 상속은 단일 상속만 지원한다

super   부모의 참조값
   부모의 멤버에 접근할 때 사용한다

super()   부모의 생성자
   자식클래스타입의 객체로 부모 필드에 접근할 수 있다
   객체를 만들 때 자식 생성자만 호출하기 때문에 자식필드만 메모리에 할당된다고 생각할 수 있다
   ex) Child c = new Child();
   자식생성자는 항상 부모생성자를 호출한다
   이는 자식의 필드를 초기화할 때 부모 필드도 초기화하는 것을 의미한다
   즉, 자식 객체를 생성하게 되면 부모 객체도 생성된다(부모객체가 먼저 생성됨)
   부모 생성자를 호출하는 방법은 super()를 사용하면된다
   만약, super()를 작성하지 않더라도 컴파일러가 자동으로 작성해준다

다형성(polymorphism)    하나의 것으로 여러 형태를 가진다
   1. 오버로딩
   2. 오버라이딩(재정의)   부모클래스에 정의한 메소드를 자식클래스에서 수정해서 사용하고 싶다면
            오버라이딩(재정의)를 하면 된다
            이때 메소드명, 매개변수, 반환타입은 부모의 메소드와 동일해야한다(내용만 변경)

오버로딩과 오버라이딩의 차이
   오버로딩 : 같은 클래스 내에서 생성자 또는 메소드를 같은이름으로 매개변수의 타입이나 개수만 다르게 만든다
      반환타입은 영향을 주지 않는다
   오버라이딩 : 상속관계를 맺은 자식클래스에서 부모클래스의 메소드를 재정의한다
      반환타입, 이름, 매개변수까지 모두 동일해야한다
      
어노테이션(Annotation)
   자바 어노테이션은 소스코드에 추가해서 사용할 수 있는 메타 데이터의 일종
   처리하는 데이터가 아닌 컴파일 과정과 실행과정에서 코드를 어떻게 처리해야하는지 알려주는 추가 정보

   @ JDK1.5이상 사용가능
   클래스파일에 컴파일러에 의해서 생성된 이후 JVM에 포함되어 동작한다
   
   - 컴파일러에게 코드 작성문법 에러를 체크하도록 정보 제공
   - 소프트웨어 개발환경이 빌드나 배포 시 코드를 자동으로 생성할 수 있도록 정보 제공
   - 런타임에 특정기능을 실행하도록 정보 제공
   
3. Casting
	기본자료형의 형변환
	기본자료형과 String 타입가
	
2. 접근 제한자(접근권한제한자, 접근자)
   default      다른 패키지에서 접근 불가(접근 제어자 생략 시 자동으로 default가 됨)
   public      모든 곳에서 접근 가능, 대표클래스를 의미할 때 사용
   protected   다른 패키지에서는 접근 불가, 자식은 허용
   private    다른 클래스에서 접근 불가, 메소드로만 접근하자(getter, setter)

         클래스   패키지   자식클래스      전체
   public      o   o   o      o
   protected   o     o   o      x
   default      o   o   x      x
   private      o   x   x      x

3. Casting
   기본 자료형의 형변환
   기본자료형과 String 타입간의 형변환

   클래스 타입에서의 형변환
   상속관계를 맺은 클래스 끼리 캐스팅이 가능하다
   up casting    부모형태로 형변환
   down casting   자식형태로 형변환

----------------------------------------------------------------------------------------
