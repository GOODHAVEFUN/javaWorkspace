day11
복습 -> 내부클래스 -> 익명클래스 -> 람다식

0. 복습
1) 인터페이스
	interface 인터페이스명{
		//상수, 추상메소드
		+ default, static, private
	}

	1. 단일상속 클래스, 다중구현 인터페이스
	2. 인터페이스는 인터페이스를 상속할 수 있다
	3. 상속과 구현은 별개이다

인터페이스를 사용하는 이유
	- 표준화
	- 마커 인터페이스 : 그룹화

인터페이스의 불편함
	강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하는 것이 불가능하다
	Adapter 추상클래스를 활용한다
		필드, 생성자, 일반메소드, 추상메소드

모호성
	하나의 자식이 여러 부모를 상속받을 때 서로 다른 부모 클래스에 동일한 이름의 멤버가 있다면
	어떤 부모의 멤버인 지 알 수 없다

해결방법
	1. 두개의 인터페이스에 같은 메소드가 있다면 자식 클래스에서 재정의하여 사용한다
	2. 부모 클래스의 메소드와 인터페이스의 디폴트 메소드가 같다면(이름, 매개변수) 
		부모 클래스의 메소드가 사용된다

2) 내부클래스(Inner Class)
	클래스 내부에서 선언 가능
	메소드 내부에서 선언 가능
	내부클래스는 외부클래스의 멤버기 때문에 외부클래스의 객체화를 먼저 진행해야한다
	외부클래스의 멤버를 상속없이 사용 가능하다

내부클래스 종류
	1. 인스턴스 내부 클래스 : 다른 클래스 내부에서 선언되는 클래스
	2. 스태틱 내부 클래스 : 다른 클래스 내부에서 선언되는 클래스
	3. 로컬 내부 클래스 : 메소드나 초기화 블록 내부에서 선언되는 클래스

1. 익명 클래스(Anonymous class)
	이름을 지어준다는 것 ? 클래스명, 필드명, 메소드명,..
		재사용 하기 위한 목적
	이름이 없다는 것은 재사용을 하겠다는것? 일회성으로 사용하겠다는것?

	이름이 없는 클래스이다
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다
	=> 기존에는 자식클래스의 객체를 생성하여 부모타입의 변수에 저장했다
	   익명클래스를 이용해 인터페이스나 추상클래스를 구현하여 객체를 생성할 수 있다
	
	클래스->메인메소드 생성
	
2. 함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface 어노테이션을 명시하면 하나의 추상메소드만 선언할 수 있도록 제한할 수 있다

식(Expression)	: 값을 계산하고 결과를 반환하는 구문
		1 + 2, "Hello", 메소드
		변수에 값을 할당하거나 객체를 생성하거나 메소드를 호출하는 것이 가능하다

문(Statements)	: 실행가능한 최소한의 코드 블록
		if문, for문, while문
		문은 하나이상의 식을 포함할 수 있으며, 조건에 따라 특정 블록을 실행하거나 반복실행할 수 있다
			
3. 람다식(Lambda Expression) : 익명메소드
	자바 8버전부터 사용가능하다
	메소드를 하나의 식으로 표현한다
	람다식을 매개변수로 전달가능, 반환도 가능하다
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 람다식으로 재정의할 때
	메소드 이름이 필요없다

람다식 문법
	매개변수 -> 바디
	LambdaTest 패키지에 LambdaTest.java 파일 확인

활용예시
	람다식과 함수형 인터페이스 : 스트림 API 많이 활용됨
	이벤트 핸들러 : 리스터 인터페이스를 함수형 인터페이스로 사용가능
	쓰레드와 비동기 처리 : Runnable, Callable 함수형 인터페이스 활용하여 다중 쓰레드와 비동기 처리 구현
	
람다식과 함수형 인터페이스 장점
	1. 간결성
	2. 가독성
	3. 확장성
	4. 병렬처리 : 쓰레드 / 여러개의 작업 동시에 수행하여 속도를 향상시키는 것


	

	
	
	


























