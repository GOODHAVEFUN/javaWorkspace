day12
복습 -> 테스트

0. 총복습
.java 기본구조
	java 프로젝트 -> 패키지 -> 클래스 -> 메소드 -> 소스코드

클래스 기본구조
	필드, 생성자, 메소드

출력메소드
	print()
	println()
	printf()

입력메소드
	next()
	nextLine()
	nextInt()
	nextDouble()
	
제어문자
	\n, \t, \", \', \\

변수명(카멜케이스)
	변수 	값을 저장할 수 있는 저장공간
	변수명	저장공간의 이름
	
자료형
기본자료형		정수	int, long
		실수	double, float
		논리	boolean
		문자형	char
참조자료형		문자열	String

형변환
	강제형변환(명시적 형변환), 자동형변환(묵시적 형변환)
	문자열 -> 다른 자료형	Integer.parseInt("문자열")
				"문자열".charAt(0)	=> 문
	다른자료형 -> 문자열	3 + "" => 

연산자 우선순위
	최우선
	단항
	산술
	쉬프트
	관계
	논리
	삼항
	대입

제어문
	조건문	if, switch
	반복문	for, while, do~while
	기타제어문	break, continue

배열
	저장공간의 나열
	
	1) 저장공간 여러개를 하나의 이름으로 관리할 수 있음
	2) 규칙성이 없는 값에 규칙성을 부여할 수 있음(index)
	3) 하나의 타입으로 된 여러개의 값을 저장할 수 있음

배열의 선언
	- 어떤값을 넣을 지 알 때
	자료형[] 배열명 = {값, 값};
	- 어떤값을 넣을지 모르지만 몇칸이 필요한지는 알때
	자료형[] 배열명 = new 자료형[칸수];
	- 어떤값을 넣을지도 모르고 몇칸이 필요한지도 모를때
	자료형[] 배열명 = null;

2차원 배열의 선언
	자료형[][] 배열명 = {{},{}};
	자료형[][] 배열명 = new 자료형[행][열];

2차원 배열의 길이
	배열명.length	: 행의 길이
	배열명[행].length	: 열의 길이

메소드
	기능
	1) 재사용
	2) 가독성
	3) 모듈화

클래스
	1) 연관성이 있는 여러개의 타입과 여러개의 기능을 한 곳에 모아 관리할 수 있다
	2) 타입이다
	3) 객체를 생성하기 위한 틀

객체화
	객체를 만드는 작업
	클래스명 참조변수 = new 생성자();

생성자
	필드 초기화

기본생성자
	컴파일러가 클래스를 컴파일 할 때 자동으로 생성되는 것(JDK의 javac 컴파일러가 담당)

JVM, JRE, JDK
	JVM(Java Virtual Machine)
		Java 코드를 기계어로 변환, 메모리관리, 가비지컬렉션, 쓰레드 관리 기능담당

	JRE(Java Runtime Environment)
		java 프로그램을 실행하기 위해 필요한 런타임 환경을 제공
		JVM과 필요한 라이브러리 등이 포함 되어 있음

	JDK(Java Development Kit)
		java 개발에 필요한 컴파일러(javac), 디버거(jdb), 문서화도구(javadoc) 등
		도구들 포함하고 있음


.java -javac 파일명.java--> .class ----java 파일명-----> 실행 결과

다형성(Polymorphism)	하나의 객체가 여러가지 타입으로 동작할 수 있는 것
			코드의 유연성, 재사용성

	오버로딩		생성자, 메소드
	오버라이딩		메소드
	참조변수의 다형성	상속(부모 클래스 타입의 참조변수로 하위 클래스 객체 참조)

this, this()
	this 	객체 자기자신, 
		객체의 주소값을 this라는 변수에 담을 수 있으며 자동으로 담긴다	
		this.필드명 = 매개변수 //생성자
		일반적으로 생성자의 매개변수와 클래스의 필드 이름이 중복될 경우 구분하기 위해 사용한다	
	this()	자기 자신의 생성자
		생성자 내부에서만 사용가능하며 최상단에 작성한다

변수의 종류
	지역변수	클래스 중괄호 영역은 포함되지 않고, 메소드나 그 안에서 선언된 변수
	매개변수	메소드의 소괄호 안에서 선언되는 변수
	전역변수	클래스 중괄호 영역에서 선언된 변수
	정적변수	static 붙은 변수, 객체 간 공유, 편의성을 위해 사용(Method 영역)
	
상속(Inheritance)
	1) 재사용
	2) 그룹화

super, super()
	super 	부모의 참조값
	super()	부모의 생성자
		

casting
	up casting	자식 값을 부모 타입으로 형변환
			다양한 타입을 한번에 관리하기 위해서
	down casting	up casting 된 객체를 자식 타입으로 형변환
			up casting된 자식에서 자식 클래스의 필드나 메소드를 사용해야하는 경우
			* 부모의 값을 자식 타입으로 형변환시 오류 발생

객체 간 타입 비교
	a instanceof A 	a가 A타입이면 true, 아니라면 false

접근권한제어자
	default : 다른 패키지 접근 불가
	public	: 모든 곳에서 접근 가능
	protected : 자식클래스에서 허용, 다른 패키지 접근 불가
	private	: 다른 클래스에서 접근 불가, 메소드(getter, setter)로 접근가능

추상클래스
	추상 메소드가 1개 이상있는 클래스
	abstract
	멤버 : 필드, 추상메소드, 일반메소드

사용 이유
	강제성을 부여하기 위해
	다른 개발자가 재정의를 안하고 그냥 사용할 수 있다는 실수를 방지하기 위해

인터페이스
	interface 인터페이스명{
		//상수 public static final, 추상메소드 public abstract
		//default, static, private
	}

사용이유
	1) 표준화
	2) 그룹화(마커 인터페이스)

Adapter 클래스
	인터페이스의 강제성을 어댑터클래스를 통해 없애주고 자식클래스에서 상속받아
	필요한 메소드만 재정의하여 사용한다

다중구현
	implement 인터페이스명1, 인터페이스명2
	
단일상속
	extends 클래스명1

모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 부모 필드에 동일한 이름의 필드가 있다면
	어떤 부모의 필드인지 알 수 없는것

해결방안
	1) 두개의 인터페이스 내에 같은 이름과 매개변수의 메소드가 선언되어있다
	=> 자식 클래스에서 재정의하여 사용한다
	2) 부모클래스의 메소드와 인터페이스의 디폴트 메소드의 이름과 매개변수가 같다
	=> 부모 클래스의 메소드가 사용된다

마커 인터페이스(Marker Interface)
	클래스들을 그룹화하기 위한 목적으로 사용한다
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입으로
	마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다
	=> 상속 단일 상속밖에 되지 않으므로 인터페이스를 사용

내부클래스(Inner Class)
	클래스 내부에 선언된 클래스
	외부클래스 : 내부 클래스를 가진 클래스
	
	메소드 안에서 클래스를 선언할 수 있다
	내부 클래스로 선언된 클래스는 외부 클래스를 상속받지 않아도 외부 클래스의 멤버를 사용할 수 있다
	외부 클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하므로 내부 클래스만 별도 사용하지 못한다

익명 클래스(Anonymouse inner class)
	이름이 없는 클래스
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다

	ClassA ca = new ClassA(){
		//오버라이딩
	};
	// 주소값(참조값)이기 때문에 끝에 ;세미콜론을 붙여준다

람다식(Lambda Expression)	: 익명메소드
	함수형 인터페이스 : 단 하나의 추상메소드를 가지고 있는 인터페이스
			@FunctionalInterface

	람다식을 사용할 때는 람다식을 저장하기 위한 참조 변수의 타입을 결정해야한다
	람다식을 하나의 변수에 대입할 때 사용하는 참조 변수의 타입을 함수형 인터페이스라고 부른다

람다식 문법
	1. 매개변수가 하나인 경우 자료형, 괄호 생략 가능
	2. 매개변수가 두개인 경우 괄호를 생략 불가능
	3. 실행할 문장이 한 문장인 경우 중괄호 생략 가능
	4. 실행할 문장이 한 문장이라도 return문 일경우 중괄호 생략 불가능 
	5. 실행할 문장이 한 문장이고 리턴값이 있는 경우 return과 중괄호를 모두 생략 불가능

일반메소드
	리턴타입 메소드명(자료형 매개변수) {
		실행할 문장1;
		실행할 문장2;
		return 리턴값;
	}

	매개변수명 -> {실행할문장1; 실행할문장2; return 리턴값}

	(자료형 매개변수명1, 자료형 매개변수명2) {
		실행할문장1;
	}

	(매개변수명1, 매개변수명2) -> 실행할문장;


->4시 10분 ~ 5시 10분까지

ex1
Ex01. int 자료형을 double 자료형으로 명시적 변환하는 방법(캐스팅 연산자를 사용하여 변환하기)
	=> 강제형변환 (double)

Ex02. 정수형 변수 num을 문자열로 변환하는 방법과 문자열 23.65의 값을 실수형으로 변환하는 방법
	=> 정수 -> 문자열 : + "" / Integer.toString()
	=> 문자열 -> 실수 : Double.parseDouble("문자열")

Ex03. 1부터 10까지 정수 출력(반복문 사용)
	=> for(int i = 1; i <= 10; i++){
		syso(i)
	}

Ex04. 출력결과와 동일한 결과 나오도록 코드 작성
123456789
 1234567
  12345
   123
    1
	=> 	i : 행 
		j : 열
	for(int i = 9; i >= 1; i-= 2){
		for(int j = 1; j <= i; j++){
			syso(j);
		}
		syso();
	}


Ex05. 출력결과와 동일한 결과 나오도록 코드 작성
A
BC
DEF
GHIJ
KLMNO

	=> char ch = 'A';
		i	=> 행 i <= 5;
		j	=> 열 j <= i;
			syso(ch)
			ch++

ex2
Ex01. 사용자로부터 배열 크기와 요소 값 입력받아 찾으려는 값이 해당 배열 내 몇번 등장하는지 개수 세기
	=> 배열크기 입력, 요소 수 입력
	=> 찾을값 입력
	=> 반복문 조건문
	=> 배열 내 몇번 등장하는지 개수세는것

Ex02. 주어진 배열에서 최대값과 최소값을 찾는 메소드 만들어서 결과 반환하기(for-each문 사용)
	int[] number = {5, 3, 2, 15, 24, 19, 0};

	=>메소드
	 기준 변수 
	 for(int 변수명 : 배열명){
		if(<)


Ex03. 두개의 정수를 매개변수로 받아서 합을 반환하는 add메소드(오버로딩 활용)
	정수 더한 값 반환
	실수 더한 값 반환

	=> 메소드 오버로딩(다형성)
	int add(int num1, int num2){
		return num1 + num2)
	}
	

Ex04. 부모 클래스 Ex04Animal, 자식 클래스 Ex04Cat, Ex04Dog, Ex04Dock 생성(Animal 추상 클래스로 구현)
	추상 메소드는 printSound
	각 클래스에 동물들에 맞는 울음소리 출력

	=> 오버라이딩(다형성) : 재정의
	
ex3 
Ex01. 주석으로 작성
	1) 메소드 오버로딩과 메소드 오버라이딩 차이점
		=> 오버로딩 : 같은 메소드명, 매개변수의 타입 개수 순서를 다르게한다
		=> 오버라이딩 : 부모클래스에서 정의된 메소드를 자식 클래스에서 동일한 이름 매개변수로 재정의한다
		=> 오버로딩 컴파일시점에서 결정되고, 오버라이딩은 실행 시점에서 결정된다

	2) 객체 지향 프로그래밍의 특징
		=> 다형성, 캡슐화, 상속, 추상화

	3) 접근제한자의 역할과 차이점
		=> 클래스, 필드, 메소드의 접근 범위를 지정해서 외부로부터 접근을 제한하는 역할
		=> public, default, protected, private

	4) 상속이란 무엇인지 설명하고, 자바에서 상속을 구현하는 방법 작성
		=> 기존 클래스의 특징을 물려받아 새로운 클래스를 생성하는 것
			A extends B{
			}
			class B{
			}		

	5) 익명클래스는 언제 사용되는지와 어떻게 구현되는지 서술
		=> 이름이 없는 클래스, 인터페이스 구현하거나 추상클래스 상속받아 1회성으로 구현해야할 때 사용
		인터페이스명 참조변수 = new 생성자() {
			오버라이딩
		};

	6) 추상클래스란 무엇인지와 사용하는 이유는 무엇인지 서술
		=> 추상메소드를 1개 이상 가진 클래스
		   객체화 불가능, 다른 클래스에서 상속 받거나 익명클래스로 객체 구현
		=> 공통된 특징을 가진 클래스들의 공통 부분을 추상화하여 재사용성을 높임
		   자식 클래스에게 메소드의 구현을 강제성, 일관성 있도록 만들어주는 것
		
	7) 인터페이스의 개념과 특징
		=> 추상메소드와 상수로만 구성(defalt, private, static 가능)
		다중 구현이 가능, 다른 클래스들에게 공통된 기능을 제공(강제성)

		=> 추상메소드, 상수, 다중상속(구현), 객체 타입으로 사용, 다형성(오버라이딩)

예외처리 -> API -> Object 클래스 -> Wrapper 클래스 -> 컬렉션 프레임워크 -> 쓰레드 -> 파일 입출력 -> 스트림

