day14
과제풀이 -> Object 클래스 -> Wrapper 클래스 -> 컬렉션 프레임워크

0. 예외처리 클래스

IllegalArgumentException
	메소드의 매개변수로 전달된 인수의 값이 잘못된 경우 발생하는 예외
	유효성 검사에서 주로 사용됨
	=> 유효하지 않은 번호입니다

IllegalStateException
	메소드의 현재 상태가 허용되지 않는 작업을 수행하려고 할 때 발생하는 예외
	이미 선택된 번호를 다시 선택하려는 경우에 주로 사용됨
	=> 중복된 번호입니다

NullPointerException
	null 값을 참조하려고 할 때 발생

IndexOutOfBoundsException
	인덱스 범위를 벗어난 경우 발생
	배열, 리스트

IOExeception
	입출력 작업 중 발생
	파일 읽기/쓰기, 네트워크 통신

NumberFormatException
	문자열을 숫자로 변환할 때 발생하는 예외

ArithmeticException
	수학 계산에서 발생하는 예외
	0으로 나누기

ClassNotFoundException
	클래스를 찾을 수 없는 경우 발생하는 예외

InterruptedException
	쓰레드가 다른 쓰레드에 의해 인터럽트 되었을 때 발생하는 예외

1. Object 클래스
	모든 클래스의 최상위 부모 클래스

1) toString()
	Object의 toString()은 참조값을 문자열 형태로 출력한다
	클래스경로와 이름@16진수로 변환된(해쉬코드)
	참조변수를 출력메소드를 이용해 출력하면 항상 toString() 사용된다 -> 참조값이 나오는 이유
	toString()을 재정의해서 출력되는 문자열을 바꿀 수 있다

Object클래스 메소드
    public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }

주소값 ? hashCode() -> 메모리 상의 주소값을 특정 알고리즘을 통해 정수값으로 변환한다
	toHexString(hashCode()); -> 16진수로 변환된 해쉬코드 값, 해쉬값

2) equals()
	Object의 equals()는 사실 ==(관계연산자)와 같다
	(주소값 비교) String의 equals()는 재정의 되어 있는 값을 비교한다
	-> 문자열 비교 equals()를 사용한다
	만든 클래스의 객체를 비교하고 싶다면 비교기준을 재정의해서 사용할 수 있다

+) 웹개발에서 Object 클래스 메소드 오버라이딩하는 경우
	동등성 비교 : 사용자정보, 주문정보, 상품정보
		객체 비교할 대 equals() 메소드를 오버라이딩해서 사용
	해시 계산 : 세션관리, 캐시관리, 데이터베이스에서 인덱싱 등
		객체의 고유 식별 관리를 위한 hashcode() 메소드를 오버라이딩해서 사용
	문자열 표현 : 로깅, 디버깅, AIP 응답
		toString() 메소드를 오버라이딩해서 객체의 필드값을 가독성 있게 표현하여
		로그에 기록하거나 응답 데이터로 전송하는 형태로 사용

3) hashCode()
	Object의 hashCode()는 객체의 주소값을 특정 알고리즘을 거쳐서 정수값으로 반환한다
	자바에서 equals()를 재정의하면 hashCode() 재정의하도록 권장한다
	
	native 메소드 -> 다른언어(c, c++)로 구현한 후 자바에서 사용하려고 할 때 이용하는 키워드

2. Wrapper Class
	기본자료형들의 클래스 타입

	기본타입(원시타입)	Wrapper 클래스(참조형)
	int		Integer
	long		Long
	double		Double
	float		Float
	boolean		Boolean
	char		Charater

	=> 기본형은 변수의 값을 그대로 저장한다
	=> 참조형은 객체의 레퍼런스를 저장한다
	=> 참조형에는 객체가 할당되어야하는데 기본형과는 달리 사이즈가 유동적이라서 Heap 영역에
	별도 메모리 공간을 차지하고 할당한 뒤 변수에는 해당 Heap영역의 주소값을 가리키게 된다

1) 매개변수로 객체가 요구될 때
2) 기본형 값이 아닌 객체로 저장해야할 때
3) 객체간의 비교가 필요할 때

	원시타입은 데이터 저장의 기본단위이고 원시타입이 아닌 모든 타입의 변수는 객체의 주소를 가진
	변수(참조변수)이다
	저장된 데이터를 바꿀수 있는 타입은 원시타입 뿐이고 나머지는 데이터가 저장된 위치를 가리키는
	메모리 주소를 담은 변수이다

	원시타입을 객체화 시켜주는 클래스가 Wrapper 클래스
	제네릭 사용이나 Object 타입의 데이터 전달할 때, 원시타입 변수를 객체화 시켜서 보관할 때 사용
	문자열 값을 원시 타입의 변수로 바꿔서 저장하는 메소드

boxing 	: 기본 타입의 값을 Wrapper 클래스의 객체로 변환
unboxing : Wrapper 클래스 객체에서 기본 타입의 값으로 변환

	클래스타입 객체 = new 클래스타입(일반타입의 값); 	//boxing(예전방법)
	클래스타입 변수 = 클래스타입.valueOf(일반타입의 값);	//boxing
	
	일반타입 변수 = 객체.일반타입Value();		//unboxing

	jdk4이상부터는 auto boxing, auto unboxing을 지원한다
	클래스타입 객체 = 일반타입 값;	//auto boxing
	일반타입 변수 = 객체;		//auto unboxing

Wrapper 클래스를 사용하는 이유
	원시타입을 박싱하면 다양한 메소드를 제공받을 수 있다
	여러 일반타입을 하나의 타입으로 묶기 위해서는 클래스타입으로 사용해야하고, 박싱을 해주어야한다
	클래스 타입이 갖는 이점이 많다
	
String 메소드
	charAt()	: 문자열에서 해당 인덱스 번호의 문자를 char으로 반환
	indexOf()	: 특정 문자나 문자열을 앞에서부터 찾아 처음으로 찾게되는 인덱스를 반환
			없을 경우 -1을 반환
	split()		: 구분문자를 기준으로 문자열을 잘라 배열에 담아 반환
	substring(start, end) : 시작 인덱스번호 ~ 끝인덱스 -1 까지의 문자열을 반환
	length()	: 문자열 길이 반환
	strip()		: 문자열의 앞뒤 공백을 제거




























